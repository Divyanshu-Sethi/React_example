[{"C:\\Users\\TMAJBW9.VW\\Documents\\React_Framework\\axioshttp\\src\\index.js":"1","C:\\Users\\TMAJBW9.VW\\Documents\\React_Framework\\axioshttp\\src\\App.js":"2","C:\\Users\\TMAJBW9.VW\\Documents\\React_Framework\\axioshttp\\src\\reportWebVitals.js":"3","C:\\Users\\TMAJBW9.VW\\Documents\\React_Framework\\axioshttp\\src\\EmpCrudHttp.js":"4"},{"size":535,"mtime":1703663597000,"results":"5","hashOfConfig":"6"},{"size":262,"mtime":1703663597000,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1703663597000,"results":"8","hashOfConfig":"6"},{"size":6343,"mtime":1703663597000,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"17qahq5",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"C:\\Users\\TMAJBW9.VW\\Documents\\React_Framework\\axioshttp\\src\\index.js",[],[],"C:\\Users\\TMAJBW9.VW\\Documents\\React_Framework\\axioshttp\\src\\App.js",["24"],[],"import logo from './logo.svg';\nimport './App.css';\nimport EmpCrudHttp from './EmpCrudHttp';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <EmpCrudHttp />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\TMAJBW9.VW\\Documents\\React_Framework\\axioshttp\\src\\reportWebVitals.js",[],[],"C:\\Users\\TMAJBW9.VW\\Documents\\React_Framework\\axioshttp\\src\\EmpCrudHttp.js",["25","26","27"],[],"import {useState,useEffect} from 'react';\nimport axios from 'axios';\nfunction EmpCrudHttp()\n{\n  \n\n  const [emparr,setEmparr]=useState([]);\n\n  const [emp,setEmp]=useState({id:3,empName:'Rita',empSalary:2000});\n\n\n  const url = 'http://localhost:8085/';\n\n  const getAllEmps = () => {\n\n      axios.get(url+'emps')\n      .then((response)=>{\n\n            const allemps = response.data;\n            console.log(allemps);\n            setEmparr(allemps);\n            console.log(emparr);\n        \n          }\n      )\n      .catch((error)=>{\n\n          console.log(error);\n\n      });\n  }\n\n  /*\n   const deleteEmp = (id)=>{\n    console.log('deleteEmp called with id:'+id);\n        axios.delete(url+'emp/'+id)\n        .then((response)=>{\n\n              const isdeleted = response.data;\n              console.log(isdeleted);\n              setEmparr((current) =>\n              current.filter((emp) => emp.id !== id));\n        })\n        .catch((error)=>{\n\n            console.log(error);\n\n        });\n   }\n   */\n\n   //async-await is just a wrapper around promise, to make it's coding easier\n   //An async function is different than a sync function in that \n   //an async function doesnâ€™t block the processing of the code below it.\n   const deleteEmp = async (id)=>{\n\n    console.log('inside async delete:deleteEmp called with id:'+id);\n\n    //instead of .then and .catch clause, use await from inside try-catch block\n    try\n     {\n      //await can be used only from async function, you can use the await keyword \n      //before a call to a function that returns a promise\n      //await blocks the execution of the code only in try block\n      //till response is available\n       let response = await axios.delete(url+'emps/'+id);\n     \n            const isdeleted = response.data;\n              console.log(isdeleted);\n              setEmparr((current) =>\n              current.filter((emp) => emp.id !== id));\n     }\n     catch(error)\n     {\n        console.log(\"Error:\"+error);\n     }\n     finally\n     {\n        console.log('finally always runs!');\n     }\n   }\n\n   const updateEmp = (e)=>{\n    console.log('update emp with id:'+e.id);\n    setEmp(e);\n   }\n\n  //step 3:code submit handler,add or update emp to emparray\n // function submitHandler(e)\n  const submitHandler = (event)=>{\n            event.preventDefault();\n            //submitted emp\n            console.log(emp);\n            add(emp);\n          }\n\n  const add = (emp)=>{\n\n    let allemps = [];\n    axios.get(url+'emps')\n    .then((response)=>{\n\n          allemps = response.data;\n          console.log('calling getallemps in empadd')\n          console.log(allemps);\n\n          console.log('emp to be find..:');\n     console.log(emp);\n     const ele = allemps.find(e => e.id==emp.id);\n     console.log('after trying to find emp in getallemps array..ele=');\n     console.log(ele);\n\n    if(ele===undefined)\n    {\n      console.log('inside if ele===undefined');\n    axios.post(url+'emps',{\n        empName:emp.empName,\n        empSalary:emp.empSalary,\n        id:emp.id\n       })\n       .then((response)=>{\n \n        console.log(response.status);\n       \n           //new emp created so add to array  \n           setEmparr([...emparr,emp]);\n           //empty the emp behind the form\n        setEmp({...emp,id:'',empName:'',empSalary:''});  \n        })\n    } \n    else if(ele.id!==undefined) \n    {\n      console.log('inside if ele!==undefined');\n      axios.put(url+'emps/'+emp.id,{\n        empName:emp.empName,\n        empSalary:emp.empSalary,\n        id:emp.id\n       })\n       .then((response)=>{\n        console.log(response.status);\n              //update the emp that is present in the list\n     const newemparr = emparr.map(curremp => {\n      if (curremp.id == emp.id) {\n          console.log('emp match found:update emp');\n          //emp already present so update curremp \n          return {...curremp, empName:emp.empName,\n                               empSalary:emp.empSalary};\n       }\n       else \n       {  // curre emp not matched return as is\n         console.log('otherwise return current emp as is'); \n        return curremp;\n       }\n     });\n     setEmparr(newemparr);\n   //empty the emp behind the form\n    setEmp({...emp,id:'',empName:'',empSalary:''}); \n \n           })      \n          \n        }    \n        \n      \n        }\n    )\n    .catch((error)=>{\n\n        console.log(error);\n\n    });\n\n     \n       \n    }\n             \n                           \n     \n//useEffect hook will run first time\n//component is rendered, as sec arg is empty array\n     useEffect(() => {\n          getAllEmps();\n        }, []);\n\n  return(<>\n\n  \n   {/* step 2:create emp form to add emp */}\n   \n   <form onSubmit={(e)=>{submitHandler(e)}}>\n   <label>\n      id:    <br/>\n      <input type='text'\n             name='id'\n             placeholder='id'\n             value={emp.id}\n             onChange={(e)=>{setEmp({...emp,id:e.target.value})}}\n           \n         />\n   </label> <br/>\n   <label>\n      EmpName:    <br/>\n      <input type='text'\n             name='empname'\n             placeholder='empname'\n             value={emp.empName}\n             onChange={(e)=>{setEmp({...emp,empName:e.target.value})}}\n        \n      />\n   </label> <br/>\n   <label>\n      EmpSal:    <br/>\n      <input type='text'\n             name='empsal'\n             placeholder='empsal'\n             value={emp.empSalary}\n             onChange={(e)=>{setEmp({...emp,empSalary:e.target.value})}}\n      />\n   </label> <br/>\n   <input type='submit' value='Add Emp' />\n   </form>\n   <hr/>\n  \n    {/* step 4:show emp array in the html table */}\n    <table>\n    <thead>\n     <tr>\n       <th>id</th>\n       <th>empname</th>\n       <th>empsal</th>\n       <th>delete emp</th>\n       <th>update emp</th>\n     </tr>\n    </thead>\n    <tbody>\n      \n       {emparr.map(\n           e=><tr key={e.id}>\n                  <td>{e.id}</td>\n                  <td>{e.empName}</td>\n                  <td>{e.empSalary}</td>\n                  <td><button onClick={()=>{deleteEmp(e.id)}}>\n                              Delete\n                      </button>\n                  </td>\n                  <td><button onClick={()=>{updateEmp(e)}} >\n                        Update\n                      </button>\n                  </td>\n               </tr>\n       )}\n    </tbody>\n   </table>\n  \n  </>);\n}\nexport default EmpCrudHttp;\n",{"ruleId":"28","severity":1,"message":"29","line":1,"column":8,"nodeType":"30","messageId":"31","endLine":1,"endColumn":12},{"ruleId":"32","severity":1,"message":"33","line":109,"column":40,"nodeType":"34","messageId":"35","endLine":109,"endColumn":42},{"ruleId":"32","severity":1,"message":"33","line":143,"column":22,"nodeType":"34","messageId":"35","endLine":143,"endColumn":24},{"ruleId":"36","severity":1,"message":"37","line":182,"column":12,"nodeType":"38","endLine":182,"endColumn":14,"suggestions":"39"},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getAllEmps'. Either include it or remove the dependency array.","ArrayExpression",["40"],{"desc":"41","fix":"42"},"Update the dependencies array to be: [getAllEmps]",{"range":"43","text":"44"},[4583,4585],"[getAllEmps]"]